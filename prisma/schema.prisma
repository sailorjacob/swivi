generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Core user profile (Supabase Auth-based)
model User {
  id             String   @id @default(cuid())
  supabaseAuthId String   @unique // Links to Supabase Auth user ID
  name           String?
  email          String   @unique // Must match Supabase Auth email
  image          String?
  role           UserRole @default(CLIPPER)
  verified       Boolean  @default(false)

  // Enhanced profile fields (optional)
  bio           String?
  website       String?
  location      String?
  walletAddress String?
  paypalEmail   String?

  // Stats (calculated from submissions)
  totalEarnings Decimal @default(0) @db.Decimal(10, 2)
  totalViews    BigInt  @default(0)

  createdAt DateTime @default(now()) @db.Timestamp(6)
  updatedAt DateTime @default(now()) @db.Timestamp(6)

  // Relations
  clipSubmissions     ClipSubmission[]
  clips               Clip[]
  payouts             Payout[]
  payoutRequests      PayoutRequest[]
  referralsGiven      Referral[]           @relation("referrals_referrerIdTousers")
  referralsReceived   Referral[]           @relation("referrals_referredIdTousers")
  socialAccounts      SocialAccount[]
  socialVerifications SocialVerification[]
  viewTracking        ViewTracking[]
  notifications       Notification[]

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime @db.Timestamp(6)

  @@unique([identifier, token])
  @@map("verificationtokens")
}

model SocialAccount {
  id           String         @id @default(cuid())
  userId       String
  platform     SocialPlatform
  username     String
  displayName  String?
  platformId   String
  followers    Int?           @default(0)
  verified     Boolean?       @default(false)
  verifiedAt   DateTime?      @db.Timestamp(6)
  connected    Boolean?       @default(true)
  accessToken  String?
  refreshToken String?
  expiresAt    DateTime?      @db.Timestamp(6)
  createdAt    DateTime?      @default(now()) @db.Timestamp(6)
  updatedAt    DateTime?      @default(now()) @db.Timestamp(6)
  users        User           @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([userId, platform, username])
  @@map("social_accounts")
}

model Campaign {
  id              String           @id @default(cuid())
  title           String
  description     String
  creator         String
  budget          Decimal          @db.Decimal(10, 2)
  spent           Decimal?         @default(0) @db.Decimal(10, 2)
  payoutRate      Decimal          @db.Decimal(10, 2)
  startDate       DateTime?        @db.Timestamp(6)
  endDate         DateTime?        @db.Timestamp(6)
  status          CampaignStatus?  @default(ACTIVE)
  requirements    String[]         @default([])
  targetPlatforms SocialPlatform[] @default([])
  featuredImage   String? // Campaign image URL
  completionReason String? // Reason campaign was completed (budget reached, manual, etc.)
  completedAt     DateTime?        @db.Timestamp(6)
  createdAt       DateTime?        @default(now()) @db.Timestamp(6)
  updatedAt       DateTime?        @default(now()) @db.Timestamp(6)
  clipSubmissions ClipSubmission[]

  @@map("campaigns")
}

model Clip {
  id              String           @id @default(cuid())
  userId          String
  url             String
  platform        SocialPlatform
  title           String?
  description     String?
  views           BigInt?          @default(0)
  likes           BigInt?          @default(0)
  shares          BigInt?          @default(0)
  earnings        Decimal?         @default(0) @db.Decimal(10, 2)
  status          ClipStatus?      @default(ACTIVE)
  createdAt       DateTime?        @default(now()) @db.Timestamp(6)
  updatedAt       DateTime?        @default(now()) @db.Timestamp(6)
  clipSubmissions ClipSubmission[]
  users           User             @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  view_tracking   ViewTracking[]

  @@map("clips")
}

model ClipSubmission {
  id               String            @id @default(cuid())
  userId           String
  campaignId       String
  clipId           String?
  clipUrl          String
  platform         SocialPlatform
  mediaFileUrl     String?
  status           SubmissionStatus? @default(PENDING)
  rejectionReason  String?
  requiresReview   Boolean?          @default(false)
  reviewReason     String?
  autoRejected     Boolean?          @default(false) // True if auto-rejected by system
  processingStatus String? // SCRAPING, VERIFYING, COMPLETE for optimistic UI
  initialViews     BigInt?           @default(0) // Views at time of approval
  finalEarnings    Decimal?          @default(0) @db.Decimal(10, 2) // Snapshot when campaign ends
  payout           Decimal?          @db.Decimal(10, 2) // DEPRECATED: use finalEarnings
  paidAt           DateTime?         @db.Timestamp(6)
  createdAt        DateTime?         @default(now()) @db.Timestamp(6)
  updatedAt        DateTime?         @default(now()) @db.Timestamp(6)
  campaigns        Campaign          @relation(fields: [campaignId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  clips            Clip?             @relation(fields: [clipId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  users            User              @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([campaignId, status])
  @@index([autoRejected])
  @@map("clip_submissions")
}

model Payout {
  id            String        @id @default(cuid())
  userId        String
  amount        Decimal       @db.Decimal(10, 2)
  currency      String?       @default("USD")
  method        PayoutMethod
  status        PayoutStatus? @default(PENDING)
  paypalEmail   String?
  bankDetails   Json?
  transactionId String?
  fee           Decimal?      @default(0) @db.Decimal(10, 2)
  netAmount     Decimal       @db.Decimal(10, 2)
  processedAt   DateTime?     @db.Timestamp(6)
  createdAt     DateTime?     @default(now()) @db.Timestamp(6)
  updatedAt     DateTime?     @default(now()) @db.Timestamp(6)
  users         User          @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@map("payouts")
}

model ViewTracking {
  id         String         @id @default(cuid())
  userId     String
  clipId     String
  views      BigInt
  date       DateTime       @db.Date
  platform   SocialPlatform
  scrapedAt  DateTime?      @default(now()) @db.Timestamp(6) // When this data was scraped
  createdAt  DateTime?      @default(now()) @db.Timestamp(6)
  clips      Clip           @relation(fields: [clipId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  users      User           @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([userId, clipId, date, platform])
  @@index([clipId, date])
  @@map("view_tracking")
}

model CronJobLog {
  id                 String    @id @default(cuid())
  jobName            String // "view-tracking", "payout-calculation", etc
  status             String // "SUCCESS", "FAILED", "RUNNING"
  startedAt          DateTime  @default(now()) @db.Timestamp(6)
  completedAt        DateTime? @db.Timestamp(6)
  duration           Int? // Duration in seconds
  clipsProcessed     Int?      @default(0)
  clipsSuccessful    Int?      @default(0)
  clipsFailed        Int?      @default(0)
  earningsCalculated Decimal?  @default(0) @db.Decimal(10, 2)
  campaignsCompleted Int?      @default(0)
  errorMessage       String?
  details            Json? // Additional structured data
  createdAt          DateTime  @default(now()) @db.Timestamp(6)

  @@index([jobName, startedAt(sort: Desc)])
  @@index([status])
  @@map("cron_job_logs")
}

model Referral {
  id                                String          @id @default(cuid())
  referrerId                        String
  referredId                        String
  bonus                             Decimal?        @default(0) @db.Decimal(10, 2)
  status                            ReferralStatus? @default(PENDING)
  createdAt                         DateTime?       @default(now()) @db.Timestamp(6)
  users_referrals_referredIdTousers User            @relation("referrals_referredIdTousers", fields: [referredId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  users_referrals_referrerIdTousers User            @relation("referrals_referrerIdTousers", fields: [referrerId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([referrerId, referredId])
  @@map("referrals")
}

model SocialVerification {
  id         String         @id @default(cuid())
  userId     String
  platform   SocialPlatform
  code       String
  verified   Boolean?       @default(false)
  verifiedAt DateTime?      @db.Timestamp(6)
  expiresAt  DateTime       @db.Timestamp(6)
  createdAt  DateTime?      @default(now()) @db.Timestamp(6)
  updatedAt  DateTime?      @default(now()) @db.Timestamp(6)
  users      User           @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([userId, platform, code])
  @@map("social_verifications")
}

model Notification {
  id        String           @id @default(cuid())
  userId    String
  type      NotificationType
  title     String
  message   String
  data      Json? // Additional data (campaignId, submissionId, etc.)
  read      Boolean          @default(false)
  readAt    DateTime?        @db.Timestamp(6)
  createdAt DateTime?        @default(now()) @db.Timestamp(6)
  users     User             @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@map("notifications")
}

model PayoutRequest {
  id              String              @id @default(cuid())
  userId          String
  amount          Decimal             @db.Decimal(10, 2)
  status          PayoutRequestStatus @default(PENDING)
  requestedAt     DateTime            @default(now()) @db.Timestamp(6)
  processedAt     DateTime?           @db.Timestamp(6)
  processedBy     String? // Admin user ID who processed it
  paymentMethod   PayoutMethod?
  paymentDetails  String? // PayPal email, wallet address, etc.
  notes           String? // Admin notes
  transactionId   String? // External payment transaction ID
  payoutId        String? // Link to Payout record once created
  createdAt       DateTime            @default(now()) @db.Timestamp(6)
  updatedAt       DateTime            @default(now()) @db.Timestamp(6)
  users           User                @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([userId, status])
  @@index([status, requestedAt])
  @@map("payout_requests")
}

enum UserRole {
  CLIPPER
  ADMIN
}

enum SocialPlatform {
  TIKTOK
  YOUTUBE
  INSTAGRAM
  TWITTER
}

enum CampaignStatus {
  DRAFT
  ACTIVE
  PAUSED
  COMPLETED
  CANCELLED
}

enum ClipStatus {
  ACTIVE
  INACTIVE
  REMOVED
}

enum SubmissionStatus {
  PENDING
  APPROVED
  REJECTED
  PAID
}

enum PayoutMethod {
  PAYPAL
  BANK_TRANSFER
  STRIPE
}

enum PayoutStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
  CANCELLED
}

enum ReferralStatus {
  PENDING
  ACTIVE
  COMPLETED
  EXPIRED
}

enum NotificationType {
  SUBMISSION_APPROVED
  SUBMISSION_REJECTED
  PAYOUT_PROCESSED
  PAYOUT_REQUESTED
  CAMPAIGN_COMPLETED
  CAMPAIGN_STARTED
  NEW_CAMPAIGN_AVAILABLE
  PAYOUT_READY
  SYSTEM_UPDATE
  VERIFICATION_SUCCESS
  VERIFICATION_FAILED
}

enum PayoutRequestStatus {
  PENDING
  APPROVED
  PROCESSING
  COMPLETED
  REJECTED
  CANCELLED
}
