generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id                                    String               @id @default(cuid())
  name                                  String?
  email                                 String?              @unique @map("email")
  emailVerified                         DateTime?            @map("email_verified")
  image                                 String?
  password                              String?
  role                                  UserRole?            @default(CLIPPER)
  bio                                   String?
  website                               String?
  location                              String?
  verified                              Boolean?             @default(false)
  walletAddress                         String?
  paypalEmail                           String?
  totalEarnings                         Decimal?             @default(0) @db.Decimal(10, 2)
  totalViews                            BigInt?              @default(0)
  createdAt                             DateTime?            @default(now()) @db.Timestamp(6)
  updatedAt                             DateTime?            @default(now()) @db.Timestamp(6)
  accounts                              Account[]
  clip_submissions                      ClipSubmission[]
  clips                                 Clip[]
  payouts                               Payout[]
  referrals_referrals_referredIdTousers Referral[]           @relation("referrals_referredIdTousers")
  referrals_referrals_referrerIdTousers Referral[]           @relation("referrals_referrerIdTousers")
  sessions                              Session[]
  social_accounts                       SocialAccount[]
  social_verifications                  SocialVerification[]
  view_tracking                         ViewTracking[]

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime @db.Timestamp(6)

  @@unique([identifier, token])
  @@map("verificationtokens")
}

model SocialAccount {
  id           String         @id @default(cuid())
  userId       String
  platform     SocialPlatform
  username     String
  displayName  String?
  platformId   String
  followers    Int?           @default(0)
  verified     Boolean?       @default(false)
  verifiedAt   DateTime?      @db.Timestamp(6)
  connected    Boolean?       @default(true)
  accessToken  String?
  refreshToken String?
  expiresAt    DateTime?      @db.Timestamp(6)
  createdAt    DateTime?      @default(now()) @db.Timestamp(6)
  updatedAt    DateTime?      @default(now()) @db.Timestamp(6)
  users        User           @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([userId, platform, username])
  @@map("social_accounts")
}

model Campaign {
  id               String           @id @default(cuid())
  title            String
  description      String
  creator          String
  budget           Decimal          @db.Decimal(10, 2)
  spent            Decimal?         @default(0) @db.Decimal(10, 2)
  payoutRate       Decimal          @db.Decimal(10, 2)
  deadline         DateTime         @db.Timestamp(6)
  startDate        DateTime?        @db.Timestamp(6)
  status           CampaignStatus?  @default(ACTIVE)
  requirements     String[]         @default([])
  targetPlatforms  SocialPlatform[] @default([])
  createdAt        DateTime?        @default(now()) @db.Timestamp(6)
  updatedAt        DateTime?        @default(now()) @db.Timestamp(6)
  clip_submissions ClipSubmission[]

  @@map("campaigns")
}

model Clip {
  id               String           @id @default(cuid())
  userId           String
  url              String
  platform         SocialPlatform
  title            String?
  description      String?
  views            BigInt?          @default(0)
  likes            BigInt?          @default(0)
  shares           BigInt?          @default(0)
  earnings         Decimal?         @default(0) @db.Decimal(10, 2)
  status           ClipStatus?      @default(ACTIVE)
  createdAt        DateTime?        @default(now()) @db.Timestamp(6)
  updatedAt        DateTime?        @default(now()) @db.Timestamp(6)
  clip_submissions ClipSubmission[]
  users            User             @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  view_tracking    ViewTracking[]

  @@map("clips")
}

model ClipSubmission {
  id              String            @id @default(cuid())
  userId          String
  campaignId      String
  clipId          String?
  clipUrl         String
  platform        SocialPlatform
  mediaFileUrl    String?
  status          SubmissionStatus? @default(PENDING)
  rejectionReason String?
  payout          Decimal?          @db.Decimal(10, 2)
  paidAt          DateTime?         @db.Timestamp(6)
  createdAt       DateTime?         @default(now()) @db.Timestamp(6)
  updatedAt       DateTime?         @default(now()) @db.Timestamp(6)
  campaigns       Campaign          @relation(fields: [campaignId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  clips           Clip?             @relation(fields: [clipId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  users           User              @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@map("clip_submissions")
}

model Payout {
  id            String        @id @default(cuid())
  userId        String
  amount        Decimal       @db.Decimal(10, 2)
  currency      String?       @default("USD")
  method        PayoutMethod
  status        PayoutStatus? @default(PENDING)
  paypalEmail   String?
  bankDetails   Json?
  transactionId String?
  fee           Decimal?      @default(0) @db.Decimal(10, 2)
  netAmount     Decimal       @db.Decimal(10, 2)
  processedAt   DateTime?     @db.Timestamp(6)
  createdAt     DateTime?     @default(now()) @db.Timestamp(6)
  updatedAt     DateTime?     @default(now()) @db.Timestamp(6)
  users         User          @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@map("payouts")
}

model ViewTracking {
  id        String         @id @default(cuid())
  userId    String
  clipId    String
  views     BigInt
  date      DateTime       @db.Date
  platform  SocialPlatform
  createdAt DateTime?      @default(now()) @db.Timestamp(6)
  clips     Clip           @relation(fields: [clipId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  users     User           @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([userId, clipId, date, platform])
  @@map("view_tracking")
}

model Referral {
  id                                String          @id @default(cuid())
  referrerId                        String
  referredId                        String
  bonus                             Decimal?        @default(0) @db.Decimal(10, 2)
  status                            ReferralStatus? @default(PENDING)
  createdAt                         DateTime?       @default(now()) @db.Timestamp(6)
  users_referrals_referredIdTousers User            @relation("referrals_referredIdTousers", fields: [referredId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  users_referrals_referrerIdTousers User            @relation("referrals_referrerIdTousers", fields: [referrerId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([referrerId, referredId])
  @@map("referrals")
}

model SocialVerification {
  id         String         @id @default(cuid())
  userId     String
  platform   SocialPlatform
  code       String
  verified   Boolean?       @default(false)
  verifiedAt DateTime?      @db.Timestamp(6)
  expiresAt  DateTime       @db.Timestamp(6)
  createdAt  DateTime?      @default(now()) @db.Timestamp(6)
  updatedAt  DateTime?      @default(now()) @db.Timestamp(6)
  users      User           @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([userId, platform, code])
  @@map("social_verifications")
}

enum UserRole {
  CLIPPER
  CREATOR
  ADMIN
}

enum SocialPlatform {
  TIKTOK
  YOUTUBE
  INSTAGRAM
  TWITTER
}

enum CampaignStatus {
  DRAFT
  ACTIVE
  PAUSED
  COMPLETED
  CANCELLED
}

enum ClipStatus {
  ACTIVE
  INACTIVE
  REMOVED
}

enum SubmissionStatus {
  PENDING
  APPROVED
  REJECTED
  PAID
}

enum PayoutMethod {
  PAYPAL
  BANK_TRANSFER
  STRIPE
}

enum PayoutStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
  CANCELLED
}

enum ReferralStatus {
  PENDING
  ACTIVE
  COMPLETED
  EXPIRED
}
