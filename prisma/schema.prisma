// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// NextAuth.js Models
model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime? @map("email_verified")
  image         String?
  password      String?   // For email/password auth
  role          UserRole  @default(CLIPPER)
  
  // Clipper Profile
  bio           String?   @db.Text
  website       String?
  location      String?
  verified      Boolean   @default(false)
  walletAddress String?   @map("wallet_address") // USDC wallet
  paypalEmail   String?   @map("paypal_email")
  totalEarnings Decimal   @default(0) @db.Decimal(10, 2)
  totalViews    BigInt    @default(0)
  createdAt     DateTime  @default(now()) @map("created_at")
  updatedAt     DateTime  @updatedAt @map("updated_at")

  // Relations
  accounts          Account[]
  sessions          Session[]
  socialAccounts    SocialAccount[]
  socialVerifications SocialVerification[]
  clips             Clip[]
  submissions       ClipSubmission[]
  payouts           Payout[]
  referrals         Referral[] @relation("ReferredBy")
  referredUsers     Referral[] @relation("Referrer")
  viewTracking      ViewTracking[]

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

// Social Accounts
model SocialAccount {
  id           String            @id @default(cuid())
  userId       String            @map("user_id")
  platform     SocialPlatform
  username     String
  displayName  String?           @map("display_name") // e.g., "Main", "Personal", "Business"
  platformId   String            @map("platform_id")
  followers    Int               @default(0)
  verified     Boolean           @default(false)
  verifiedAt   DateTime?         @map("verified_at")
  connected    Boolean           @default(true)
  accessToken  String?           @map("access_token") @db.Text
  refreshToken String?           @map("refresh_token") @db.Text
  expiresAt    DateTime?         @map("expires_at")
  createdAt    DateTime          @default(now()) @map("created_at")
  updatedAt    DateTime          @updatedAt @map("updated_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, platform])
  @@map("social_accounts")
}

// Campaigns
model Campaign {
  id              String           @id @default(cuid())
  title           String
  description     String           @db.Text
  creator         String
  budget          Decimal          @db.Decimal(10, 2)
  spent           Decimal          @default(0) @db.Decimal(10, 2)
  minPayout       Decimal          @db.Decimal(10, 2) @map("min_payout")
  maxPayout       Decimal          @db.Decimal(10, 2) @map("max_payout")
  deadline        DateTime
  status          CampaignStatus   @default(ACTIVE)
  requirements    String[]         @default([])
  targetPlatforms SocialPlatform[] @default([])
  createdAt       DateTime         @default(now()) @map("created_at")
  updatedAt       DateTime         @updatedAt @map("updated_at")

  // Relations
  submissions ClipSubmission[]

  @@map("campaigns")
}

// Clips & Submissions
model Clip {
  id          String         @id @default(cuid())
  userId      String         @map("user_id")
  url         String
  platform    SocialPlatform
  title       String?
  description String?        @db.Text
  views       BigInt         @default(0)
  likes       BigInt         @default(0)
  shares      BigInt         @default(0)
  earnings    Decimal        @default(0) @db.Decimal(10, 2)
  status      ClipStatus     @default(ACTIVE)
  createdAt   DateTime       @default(now()) @map("created_at")
  updatedAt   DateTime       @updatedAt @map("updated_at")

  user         User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  submissions  ClipSubmission[]
  viewTracking ViewTracking[]

  @@map("clips")
}

model ClipSubmission {
  id               String           @id @default(cuid())
  userId           String           @map("user_id")
  campaignId       String           @map("campaign_id")
  clipId           String?          @map("clip_id")
  clipUrl          String           @map("clip_url")
  platform         SocialPlatform
  mediaFileUrl     String?          @map("media_file_url")
  status           SubmissionStatus @default(PENDING)
  rejectionReason  String?          @map("rejection_reason") @db.Text
  payout           Decimal?         @db.Decimal(10, 2)
  paidAt           DateTime?        @map("paid_at")
  createdAt        DateTime         @default(now()) @map("created_at")
  updatedAt        DateTime         @updatedAt @map("updated_at")

  user     User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  campaign Campaign  @relation(fields: [campaignId], references: [id], onDelete: Cascade)
  clip     Clip?     @relation(fields: [clipId], references: [id])

  @@map("clip_submissions")
}

// Payouts
model Payout {
  id            String        @id @default(cuid())
  userId        String        @map("user_id")
  amount        Decimal       @db.Decimal(10, 2)
  currency      String        @default("USD")
  method        PayoutMethod
  status        PayoutStatus  @default(PENDING)
  paypalEmail   String?       @map("paypal_email")
  bankDetails   Json?         @map("bank_details")
  transactionId String?       @map("transaction_id")
  fee           Decimal       @default(0) @db.Decimal(10, 2)
  netAmount     Decimal       @db.Decimal(10, 2) @map("net_amount")
  processedAt   DateTime?     @map("processed_at")
  createdAt     DateTime      @default(now()) @map("created_at")
  updatedAt     DateTime      @updatedAt @map("updated_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("payouts")
}

// View Tracking
model ViewTracking {
  id        String   @id @default(cuid())
  userId    String   @map("user_id")
  clipId    String   @map("clip_id")
  views     BigInt
  date      DateTime @db.Date
  platform  SocialPlatform
  createdAt DateTime @default(now()) @map("created_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  clip Clip @relation(fields: [clipId], references: [id], onDelete: Cascade)

  @@unique([userId, clipId, date, platform])
  @@map("view_tracking")
}

// Referrals
model Referral {
  id          String        @id @default(cuid())
  referrerId  String        @map("referrer_id")
  referredId  String        @map("referred_id")
  bonus       Decimal       @default(0) @db.Decimal(10, 2)
  status      ReferralStatus @default(PENDING)
  createdAt   DateTime      @default(now()) @map("created_at")

  referrer  User @relation("Referrer", fields: [referrerId], references: [id], onDelete: Cascade)
  referred  User @relation("ReferredBy", fields: [referredId], references: [id], onDelete: Cascade)

  @@unique([referrerId, referredId])
  @@map("referrals")
}

// Enums
enum UserRole {
  CLIPPER
  CREATOR
  ADMIN
}

enum SocialPlatform {
  TIKTOK
  YOUTUBE
  INSTAGRAM
  TWITTER
  FACEBOOK
}

enum CampaignStatus {
  DRAFT
  ACTIVE
  PAUSED
  COMPLETED
  CANCELLED
}

enum ClipStatus {
  ACTIVE
  INACTIVE
  REMOVED
}

enum SubmissionStatus {
  PENDING
  APPROVED
  REJECTED
  PAID
}

enum PayoutMethod {
  PAYPAL
  BANK_TRANSFER
  STRIPE
}

enum PayoutStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
  CANCELLED
}

enum ReferralStatus {
  PENDING
  ACTIVE
  COMPLETED
  EXPIRED
}

model SocialVerification {
  id         String          @id @default(cuid())
  userId     String          @map("user_id")
  platform   SocialPlatform
  code       String          // 6-character verification code
  verified   Boolean         @default(false)
  verifiedAt DateTime?       @map("verified_at")
  expiresAt  DateTime        @map("expires_at")
  createdAt  DateTime        @default(now()) @map("created_at")
  updatedAt  DateTime        @updatedAt @map("updated_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, platform, code])
  @@map("social_verifications")
}
